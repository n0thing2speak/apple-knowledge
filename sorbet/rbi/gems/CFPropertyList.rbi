# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/CFPropertyList/all/CFPropertyList.rbi
#
# CFPropertyList-3.0.5

class CFPlistError < StandardError
end
class CFFormatError < CFPlistError
end
class CFTypeError < CFPlistError
end
module CFPropertyList
  def guess(object, options = nil); end
  def native_types(object, keys_as_symbols = nil); end
  def self.guess(object, options = nil); end
  def self.native_types(object, keys_as_symbols = nil); end
  def self.xml_parser_interface; end
  def self.xml_parser_interface=(arg0); end
end
class CFPropertyList::Blob < String
end
class CFPropertyList::UidFixnum < Integer
end
class CFPropertyList::CFType
  def initialize(value = nil); end
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
  def value; end
  def value=(arg0); end
end
class CFPropertyList::CFString < CFPropertyList::CFType
  def quoted; end
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
end
class CFPropertyList::CFInteger < CFPropertyList::CFType
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
end
class CFPropertyList::CFReal < CFPropertyList::CFType
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
end
class CFPropertyList::CFDate < CFPropertyList::CFType
  def get_value(format = nil); end
  def initialize(value = nil, format = nil); end
  def self.date_string(val); end
  def self.parse_date(val); end
  def set_value(value, format = nil); end
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
end
class CFPropertyList::CFBoolean < CFPropertyList::CFType
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
end
class CFPropertyList::CFData < CFPropertyList::CFType
  def decoded_value; end
  def encoded_value; end
  def initialize(value = nil, format = nil); end
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
end
class CFPropertyList::CFArray < CFPropertyList::CFType
  def initialize(val = nil); end
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
end
class CFPropertyList::CFDictionary < CFPropertyList::CFType
  def initialize(value = nil); end
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
end
class CFPropertyList::CFUid < CFPropertyList::CFType
  def to_binary(bplist); end
  def to_plain(plist); end
  def to_xml(parser); end
end
class CFPropertyList::Binary
  def array_to_binary(val); end
  def bool_to_binary(val); end
  def count_object_refs(object); end
  def data_to_binary(val); end
  def date_to_binary(val); end
  def dict_to_binary(val); end
  def int_to_binary(value); end
  def load(opts); end
  def num_to_binary(value); end
  def object_ref_size(object_refs); end
  def read_binary_array(fname, fd, length); end
  def read_binary_data(fname, fd, length); end
  def read_binary_date(fname, fd, length); end
  def read_binary_dict(fname, fd, length); end
  def read_binary_int(fname, fd, length); end
  def read_binary_null_type(length); end
  def read_binary_object(fname, fd); end
  def read_binary_object_at(fname, fd, pos); end
  def read_binary_real(fname, fd, length); end
  def read_binary_string(fname, fd, length); end
  def read_binary_unicode_string(fname, fd, length); end
  def read_fd(fd, length); end
  def real_to_binary(val); end
  def self.ascii_string?(str); end
  def self.bytes_needed(count); end
  def self.charset_convert(str, from, to = nil); end
  def self.charset_strlen(str, charset = nil); end
  def self.pack_int_array_with_size(nbytes, array); end
  def self.pack_it_with_size(nbytes, int); end
  def self.type_bytes(type, length); end
  def string_to_binary(val); end
  def to_str(opts = nil); end
  def uid_to_binary(value); end
  def unpack_with_size(nbytes, buff); end
end
class CFPropertyList::PlainParser < CFPropertyList::XMLParserInterface
  def escape_char; end
  def import_plain; end
  def load(opts); end
  def read_array; end
  def read_binary; end
  def read_dict; end
  def read_quoted; end
  def read_unquoted; end
  def skip_whitespaces; end
  def to_str(opts = nil); end
end
class CFPropertyList::NokogiriXMLParser < CFPropertyList::ParserInterface
  def append_node(parent, child); end
  def get_value(n); end
  def import_xml(node); end
  def load(opts); end
  def new_node(name); end
  def new_text(val); end
  def to_str(opts = nil); end
end
class CFPropertyList::ParserInterface
  def load(opts = nil); end
  def to_str(opts = nil); end
end
class CFPropertyList::XMLParserInterface < CFPropertyList::ParserInterface
  def append_node(parent, child); end
  def new_node(name); end
  def new_text(val); end
end
class CFPropertyList::List
  def filename; end
  def filename=(arg0); end
  def format; end
  def format=(arg0); end
  def formatted; end
  def formatted=(arg0); end
  def initialize(opts = nil); end
  def load(file = nil, format = nil); end
  def load_binary(filename = nil); end
  def load_binary_str(str = nil); end
  def load_plain(filename = nil); end
  def load_plain_str(str = nil); end
  def load_str(str = nil, format = nil); end
  def load_xml(filename = nil); end
  def load_xml_str(str = nil); end
  def save(file = nil, format = nil, opts = nil); end
  def self.parsers; end
  def self.parsers=(val); end
  def to_str(format = nil, opts = nil); end
  def value; end
  def value=(arg0); end
end
class Array
  def to_plist(options = nil); end
end
class Enumerator
  def to_plist(options = nil); end
end
class Hash
  def to_plist(options = nil); end
end
